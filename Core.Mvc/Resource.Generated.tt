<#
/*
Based on a template by Kenneth Baltrinic.
*/
#>
<#@ template debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#
   var serviceProvider = Host as IServiceProvider;
    if (serviceProvider != null) {
        Dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
    }

    // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
    if (Dte == null) {
        throw new Exception("T4MVC can only execute through the Visual Studio host");
    }

    Project = GetProjectContainingT4File(Dte);

    if (Project == null) {
        Error("Could not find the VS Project containing the T4 file.");
        return "XX";
    }
    
     AppRoot = Path.GetDirectoryName(Project.FullName) + '\\';
     RootNamespace = Project.Properties.Item("RootNamespace").Value.ToString();
#>
<#
try{
	var folder=AppRoot+@"wwwroot\js\";
	var ds = Directory.GetDirectories(folder);
	CreateNamespace(folder);
	foreach (var item in ds)
    {
       	WriteLine("\t");
        CreateNamespace(item);
     }

	 WriteLine("\t");
	folder=AppRoot+@"wwwroot\css\";
	ds = Directory.GetDirectories(folder);
	CreateNamespace2(folder);
	foreach (var item in ds)
    {
       	WriteLine("\t");
        CreateNamespace(item);
     }
}
catch(Exception ex)
{
    Error(ex.ToString());
}
#>
<#+
    bool AlwaysKeepTemplateDirty = true;
    static DTE Dte;
    static Project Project;
    static string AppRoot;
    static string RootNamespace;

  void CreateNamespace(string dir)
        {
            string wwwrootDir = AppRoot+"wwwroot";
            string[] a = Directory.GetFiles(dir);
            DirectoryInfo DirectoryInfo = new DirectoryInfo(dir);
            string namespaceEnd = DirectoryInfo.Parent.FullName.Replace(wwwrootDir, "").Replace(@"\", ".");
          // todo
		  if(namespaceEnd==".js"){
		   namespaceEnd =".Js";
		   }
		    string @namespace =RootNamespace + (namespaceEnd == "." ? "" : namespaceEnd);
            WriteLine($"namespace {@namespace}");
            WriteLine("{");
            string className = ToCamelCase(DirectoryInfo.Name);
	    	if(className=="Js"){
		    className ="Javascript";
		    }	
            WriteLine($"    public class {className}");
            WriteLine("    {");
            foreach (var file in a.Where(o => o.EndsWith(".js") && !o.EndsWith("min.js")))
            {
                FileInfo FileInfo = new FileInfo(file);
                string value = FileInfo.FullName.Replace(wwwrootDir, "");
                WriteLine($"        public const string {ToCamelCaseComplex(FileInfo.Name)} = \"{value.Replace(@"\", "/")}\";");
            }
            WriteLine("    }");
            WriteLine("}");
        }
   void CreateNamespace2(string dir)
        {
            string wwwrootDir = AppRoot+"wwwroot";
            string[] a = Directory.GetFiles(dir);
            DirectoryInfo DirectoryInfo = new DirectoryInfo(dir);
            string namespaceEnd = DirectoryInfo.Parent.FullName.Replace(wwwrootDir, "").Replace(@"\", ".");
          // todo
		  if(namespaceEnd==".css"){
		   namespaceEnd =".Css";
		   }
		    string @namespace =RootNamespace + (namespaceEnd == "." ? "" : namespaceEnd);
            WriteLine($"namespace {@namespace}");
            WriteLine("{");
            string className = ToCamelCase(DirectoryInfo.Name);
	    	if(className=="Css"){
		    className ="Css";
		    }	
            WriteLine($"    public class {className}");
            WriteLine("    {");
            foreach (var file in a.Where(o => o.EndsWith(".css") && !o.EndsWith("min.css")))
            {
                FileInfo FileInfo = new FileInfo(file);
                string value = FileInfo.FullName.Replace(wwwrootDir, "");
                WriteLine($"        public const string {ToCamelCaseComplex2(FileInfo.Name)} = \"{value.Replace(@"\", "/")}\";");
            }
            WriteLine("    }");
            WriteLine("}");
        }
   string ToCamelCaseComplex(string name)
        {
            string pname = name.Replace(".js", "");
            var arr = pname.Split('.', '-');
            var value = "";
            foreach (var item in arr)
            {
                value += ToCamelCase(item);
            }
            return value;
        }
		   string ToCamelCaseComplex2(string name)
        {
            string pname = name.Replace(".css", "");
            var arr = pname.Split('.', '-');
            var value = "";
            foreach (var item in arr)
            {
                value += ToCamelCase(item);
            }
            return value;
        }
    string ToCamelCase(string name)
        {
            char firstChar = name[0];
            string CamelCase = char.ToUpper(firstChar) + name.Substring(1);

            return CamelCase;
        }

Project GetProjectContainingT4File(DTE dte) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    if (AlwaysKeepTemplateDirty) {
        // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
        // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
        // Note: this is certainly hacky, but is the best I could come up with so far.
        projectItem.Document.Saved = false;
    }

    return projectItem.ContainingProject;
}
#>